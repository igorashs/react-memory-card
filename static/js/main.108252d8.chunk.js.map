{"version":3,"sources":["shared/Layout.js","GameHeader/Logo/eevee-logo.png","GameHeader/Logo/Logo.js","GameHeader/Scoreboard/Scoreboard.js","GameHeader/GameHeader.js","GameBoard/Card/Card.js","GameBoard/Status/Status.js","shared/Loading/pikaSpinner.svg","shared/Loading/Loading.js","GameBoard/GameBoard.js","GameOver/GameOver.js","lib/CardsCollection.js","App.js","index.js"],"names":["StyledLayout","styled","div","Layout","props","children","StyledLogo","Logo","src","logo","alt","StyledBoard","Score","p","BestScore","Divider","Scoreboard","score","bestScore","StyledHeader","header","GameHeader","appear","keyframes","StyledCard","animation","css","Card","useState","toAnimate","setToAnimate","card","name","onCardClick","animate","id","useEffect","timeout","setTimeout","clearTimeout","onClick","draggable","Text","h2","Status","text","spin","pulse","Modal","Loading","spinner","StyledMain","main","GameBoard","cards","lvl","appLoaded","setAnimate","handleCardClick","prev","nr","map","Button","button","GameOver","onNewGameClick","pokedex","Pokedex","fetchCardsImgs","Promise","all","resolve","img","Image","onload","shuffleCards","prevCards","r","max","length","shuffled","i","Math","floor","random","splice","getCards","quantity","start","getRandomizedInterval","MAX","getRandomizedStart","ids","getPokemonByName","fetchCardsWithIDS","end","push","getIDSFromInterval","CardsCollection","getCardsBriefInfo","a","brief","sprites","other","front_default","App","setAppLoaded","isGameOver","setIsGameOver","knownCards","setKnownCards","setCards","cardsCount","setLvl","setScore","setBestScore","newCards","prevLvl","foundSameCard","find","cardId","prevKnownCards","prevScore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.108252d8.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst StyledLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: var(--primary);\n  color: var(--primary-text);\n`;\n\nexport function Layout(props) {\n  return <StyledLayout>{props.children}</StyledLayout>;\n}\n","export default __webpack_public_path__ + \"static/media/eevee-logo.d4558f95.png\";","import styled from 'styled-components';\nimport logo from './eevee-logo.png';\n\nconst StyledLogo = styled.div`\n  width: 80px;\n  min-width: 50px;\n`;\n\nexport function Logo() {\n  return (\n    <StyledLogo>\n      <img src={logo} alt='Poke Logo' />\n    </StyledLogo>\n  );\n}\n","import styled from 'styled-components';\n\nconst StyledBoard = styled.div`\n  padding: 5px;\n  flex: 1 1 auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Score = styled.p`\n  color: rgb(188 255 152);\n  padding: 5px;\n  font-size: 24px;\n\n  @media (max-width: 480px) {\n    font-size: 20px;\n  }\n`;\n\nconst BestScore = styled(Score)`\n  color: rgb(255 152 152);\n`;\n\nconst Divider = styled.div`\n  height: 24px;\n  width: 1px;\n  background-color: white;\n  margin: 0 10px;\n`;\n\nexport function Scoreboard({ score, bestScore }) {\n  return (\n    <StyledBoard>\n      <Score>Score: {score}</Score>\n      <Divider />\n      <BestScore>Best: {bestScore}</BestScore>\n    </StyledBoard>\n  );\n}\n","import styled from 'styled-components';\nimport { Logo } from './Logo';\nimport { Scoreboard } from './Scoreboard';\n\nconst StyledHeader = styled.header`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: center;\n  min-height: 60px;\n  padding: 10px;\n  background-color: var(--secondary);\n  border-bottom: 3px solid var(--complimentary);\n  box-shadow: inset 0px 5px 6px var(--primary);\n\n  @media (max-width: 480px) {\n    h1 {\n      font-size: 28px;\n    }\n  }\n`;\n\nexport function GameHeader({ score, bestScore }) {\n  return (\n    <StyledHeader>\n      <Logo />\n      <h1>PokeMemory!</h1>\n      <Scoreboard score={score} bestScore={bestScore} />\n    </StyledHeader>\n  );\n}\n","import styled, { keyframes, css } from 'styled-components';\nimport { useState, useEffect } from 'react';\n\nconst DURATION = 400;\n\nconst appear = keyframes`\n  0% {\n    transform: scale(0);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`;\n\nconst StyledCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 5px;\n  min-width: 60px;\n  position: relative;\n\n  border-radius: 5px;\n  border: 3px solid rgb(43 56 41);\n  background-color: rgb(64 81 62);\n  box-shadow: 0px 1px 4px #585858;\n  transition: all 200ms;\n\n  overflow: hidden;\n  cursor: pointer;\n\n  ${({ animation }) =>\n    animation &&\n    css`\n      animation: ${appear} ${DURATION}ms 1;\n    `}\n\n  img {\n    width: 200px;\n    height: 200px;\n  }\n\n  h3 {\n    font-size: 24px;\n    padding: 0 5px;\n    user-select: none;\n  }\n\n  @media (min-width: 975px) {\n    &:hover {\n      transform: scale(1.1);\n    }\n  }\n\n  @media (max-width: 975px) {\n    img {\n      width: 160px;\n      height: 160px;\n    }\n  }\n\n  @media (max-width: 575px) {\n    img {\n      width: 100px;\n      height: 100px;\n    }\n\n    h3 {\n      font-size: 20px;\n    }\n  }\n\n  @media (max-width: 480px) {\n    img {\n      width: 60px;\n      height: 60px;\n    }\n\n    h3 {\n      font-size: 16px;\n    }\n  }\n`;\n\nconst Divider = styled.div`\n  width: 100%;\n  background-color: #333;\n  height: 1px;\n`;\n\nexport function Card(props) {\n  const [toAnimate, setToAnimate] = useState();\n\n  const { card, alt = card.name, onCardClick, animate } = props;\n  const { name, src, id } = card;\n\n  useEffect(() => {\n    setToAnimate(true);\n    const timeout = setTimeout(() => {\n      setToAnimate(false);\n    }, DURATION);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [animate]);\n\n  return (\n    <StyledCard onClick={() => onCardClick(id)} animation={toAnimate}>\n      <img src={src} alt={alt} draggable='false' />\n      <Divider />\n      <h3>{name}</h3>\n    </StyledCard>\n  );\n}\n","import styled from 'styled-components';\n\nconst Text = styled.h2`\n  text-decoration: underline;\n\n  @media (max-width: 480px) {\n    font-size: 18px;\n  }\n`;\n\nexport function Status({ text }) {\n  return <Text>{text}</Text>;\n}\n","export default __webpack_public_path__ + \"static/media/pikaSpinner.20e5d35b.svg\";","import styled, { keyframes } from 'styled-components';\nimport spinner from './pikaSpinner.svg';\n\nconst spin = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst pulse = keyframes`\n  from {\n    transform: scale(1);\n  }\n\n  to {\n    transform: scale(1.2);\n  }\n`;\n\nconst Modal = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background: var(--primary);\n\n  img {\n    animation: ${spin} 500ms linear infinite;\n    width: 100px;\n  }\n\n  p {\n    text-align: center;\n    font-size: 28px;\n    animation: ${pulse} 500ms alternate infinite;\n  }\n\n  @media (max-width: 480px) {\n    img {\n      width: 60px;\n    }\n\n    p {\n      font-size: 20px;\n    }\n  }\n\n  z-index: 2021;\n`;\n\nexport function Loading({ text }) {\n  return (\n    <Modal>\n      <img src={spinner} alt='spinner' />\n      {text && <p>{text}</p>}\n    </Modal>\n  );\n}\n","import styled from 'styled-components';\nimport { useState, useEffect } from 'react';\nimport { Card } from './Card';\nimport { Status } from './Status';\nimport { Loading } from '../shared/Loading';\n\nconst StyledBoard = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: flex-start;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin: 10px;\n  padding: 5px;\n`;\n\nconst StyledMain = styled.main`\n  flex: 1 1 auto;\n  position: relative;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: 10px;\n`;\n\nexport function GameBoard({ cards, onCardClick, lvl, appLoaded }) {\n  const [animate, setAnimate] = useState();\n\n  useEffect(() => {}, [animate]);\n\n  const handleCardClick = (id) => {\n    setAnimate((prev) => !prev);\n    onCardClick(id);\n  };\n\n  return (\n    <StyledMain>\n      <Status text={`Choose your next Pokemon! Lvl ${lvl.nr}`} />\n      <StyledBoard>\n        {cards\n          ? cards.map((card) => (\n              <Card\n                key={card.id}\n                card={card}\n                onCardClick={handleCardClick}\n                animate={animate}\n              />\n            ))\n          : appLoaded && <Loading text={`Loading Lvl ${lvl.nr}`} />}\n      </StyledBoard>\n    </StyledMain>\n  );\n}\n","import styled from 'styled-components';\n\nconst Modal = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background: var(--primary);\n\n  p {\n    text-align: center;\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 44px;\n  }\n\n  @media (max-width: 480px) {\n    p {\n      font-size: 20px;\n    }\n\n    h2 {\n      font-size: 28px;\n    }\n  }\n\n  z-index: 2021;\n`;\n\nconst Button = styled.button`\n  margin-top: 20px;\n  color: var(--primary-text);\n  background-color: var(--secondary);\n  font-size: 24px;\n  padding: 5px 12px;\n  border: 0;\n  cursor: pointer;\n\n  :hover {\n    background-color: rgb(70 77 90);\n  }\n\n  @media (max-width: 480px) {\n    font-size: 18px;\n  }\n`;\n\nexport function GameOver({ score, onNewGameClick }) {\n  return (\n    <Modal>\n      <h2>Game Over!</h2>\n      <p>Congratulations your Score is {score}</p>\n      <Button onClick={onNewGameClick}>New Game</Button>\n    </Modal>\n  );\n}\n","import { Pokedex } from 'pokeapi-js-wrapper';\n\nconst pokedex = new Pokedex();\n\n// Pokemons Interval IDS\nconst MIN = 1;\nconst MAX = 898;\n\n// get random start between [1 - 898] (inclusive)\nconst getRandomizedStart = (quantity) =>\n  Math.floor(Math.random() * (MAX - MIN - quantity + 2)) + MIN;\n\n// get start and end interval\nconst getRandomizedInterval = (quantity, start) => [start, quantity + start];\n\n// get ids from interval\nconst getIDSFromInterval = (start, end) => {\n  let ids = [];\n\n  for (let i = start; i < end; i++) {\n    ids.push(i);\n  }\n\n  return ids;\n};\n\n// fetch cards with ids\nconst fetchCardsWithIDS = (ids) =>\n  Promise.all(ids.map((id) => pokedex.getPokemonByName(id)));\n\n// fetch src imgs\n// preload!\nconst fetchCardsImgs = (cards) =>\n  Promise.all(\n    cards.map(\n      ({ src }) =>\n        new Promise((resolve) => {\n          const img = new Image();\n          img.src = src;\n\n          img.onload = () => resolve(src);\n        })\n    )\n  );\n\n// get random number from 0 to max not included\nconst getRandomIndex = (max) => Math.floor(Math.random() * max);\n\n// shuffle the cards;\nconst shuffleCards = (prevCards) => {\n  let cards = [...prevCards];\n  const length = cards.length;\n  let shuffled = [];\n  let r;\n\n  for (let i = 0; i < length; i += 1) {\n    r = getRandomIndex(cards.length);\n    shuffled = [...shuffled, ...cards.splice(r, 1)];\n  }\n\n  return shuffled;\n};\n\n// fetch a specific amount of cards\nconst getCards = (quantity) => {\n  const [start, end] = getRandomizedInterval(\n    quantity,\n    getRandomizedStart(quantity)\n  );\n  const ids = getIDSFromInterval(start, end);\n  const cards = fetchCardsWithIDS(ids);\n\n  return cards;\n};\n\n// fetch a specific amount of cards with a brief information\n// name and img\nconst getCardsBriefInfo = async (quantity) => {\n  const cards = await getCards(quantity);\n\n  const brief = cards.map((card) => ({\n    id: card.id,\n    name: card.name,\n    src: card.sprites.other['official-artwork'].front_default\n  }));\n\n  await fetchCardsImgs(brief);\n  const shuffled = shuffleCards(brief);\n\n  return shuffled;\n};\n\nconst CardsCollection = {\n  getCardsBriefInfo,\n  shuffleCards\n};\n\nexport { CardsCollection as default };\n","import { useState, useEffect } from 'react';\nimport { Layout } from './shared/Layout';\nimport { GameHeader } from './GameHeader';\nimport { GameBoard } from './GameBoard';\nimport { Loading } from './shared/Loading';\nimport { GameOver } from './GameOver';\nimport CardsCollection from './lib/CardsCollection';\n\nexport default function App() {\n  const [appLoaded, setAppLoaded] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [knownCards, setKnownCards] = useState([]);\n  const [cards, setCards] = useState();\n  const [lvl, setLvl] = useState({ cardsCount: 4, nr: 1 });\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n\n  // get cards on new lvl\n  useEffect(async () => {\n    const newCards = await CardsCollection.getCardsBriefInfo(lvl.cardsCount);\n    setCards(newCards);\n\n    // first app load\n    if (!appLoaded) {\n      setAppLoaded(true);\n    }\n  }, [lvl]);\n\n  //check player progress for next lvl\n  useEffect(() => {\n    if (knownCards.length && knownCards.length === lvl.cardsCount) {\n      setLvl((prevLvl) => {\n        let cardsCount = prevLvl.cardsCount < 12 ? prevLvl.cardsCount + 2 : 12;\n        let nr = prevLvl.nr + 1;\n\n        return { cardsCount, nr };\n      });\n\n      setKnownCards([]);\n      setCards(null);\n    }\n  }, [knownCards]);\n\n  const handleCardClick = (id) => {\n    const foundSameCard = knownCards.find((cardId) => cardId === id)\n      ? true\n      : false;\n\n    // player has memorized\n    if (!foundSameCard) {\n      setKnownCards((prevKnownCards) => {\n        let knownCards = [...prevKnownCards];\n        knownCards.push(id);\n\n        return knownCards;\n      });\n\n      setCards((prevCards) => CardsCollection.shuffleCards(prevCards));\n\n      // update score\n      setScore((prevScore) => {\n        const score = prevScore + 1;\n\n        if (score > bestScore) {\n          setBestScore(score);\n        }\n\n        return score;\n      });\n    }\n\n    // game over\n    if (foundSameCard) {\n      setIsGameOver(true);\n    }\n  };\n\n  const handleNewGameClick = () => {\n    setIsGameOver(false);\n    setKnownCards([]);\n    setScore(0);\n    setCards(null);\n    setLvl({ cardsCount: 4, nr: 1 });\n  };\n\n  return (\n    <Layout>\n      {!appLoaded && <Loading text='Loading..' />}\n      {isGameOver && (\n        <GameOver score={score} onNewGameClick={handleNewGameClick} />\n      )}\n\n      <GameHeader score={score} bestScore={bestScore} />\n      <GameBoard\n        cards={cards}\n        onCardClick={handleCardClick}\n        lvl={lvl}\n        appLoaded={appLoaded}\n      />\n    </Layout>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/global.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}